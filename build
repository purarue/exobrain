#!/usr/bin/env bash
# This builds the markdown files into HTML files.
# This runs pandoc by searching for README.md files recursively
# and running pandoc against that with the assets/template.html as a base
#
# additionally:
# runs pmark scripts: https://github.com/seanbreckenridge/pmark
# checks the yaml frontmatter to validate meta tags

# cd to this dir
cd "$(dirname "${BASH_SOURCE[0]}")" || exit

script_name="$(basename "${BASH_SOURCE[0]}")"

havecmd() {
	local BINARY ERRMSG
	BINARY="${1:?Must provide command to check}"
	if command -v "$BINARY" >/dev/null 2>&1; then
		return 0
	else
		ERRMSG="'$script_name' requires '$BINARY', could not find that on your \$PATH"
		if [[ -n "$2" ]]; then
			ERRMSG="$ERRMSG. $2"
		fi
		printf '%s\n' "$ERRMSG" 1>&2
		return 1
	fi
}

# if external commands exist; default to false
declare HAS_HTML_MINIFIER HAS_PRETTIER
HAS_HTML_MINIFIER=0
HAS_PRETTIER=0

set -e
havecmd curl
havecmd perl
havecmd go
havecmd python
havecmd tput
havecmd tr
havecmd fzf "See https://github.com/junegunn/fzf"
havecmd fd "Install from <https://github.com/sharkdp/fd#installation>"
havecmd entr "Install from <https://eradman.com/entrproject/>"
havecmd pandoc "Install from <https://pandoc.org/installing.html>"
havecmd jq "Install from <https://stedolan.github.io/jq/download>"
havecmd wait-for-internet "Install from <https://github.com/seanbreckenridge/wait-for-internet> (or just remove the line from the \`./build\` script)"
havecmd pmark "Install from <https://github.com/seanbreckenridge/pmark>"
set +e
# optional, for formatting
havecmd html-minifier "Install with \`npm install -g html-minifier\`" && HAS_HTML_MINIFIER=1
havecmd prettier "Install with \`npm install -g prettier\`" && HAS_PRETTIER=1

# colors
declare GREEN RESET
GREEN="$(tput setaf 2)"
RESET="$(tput sgr0)"
readonly GREEN RESET

wait-for-internet >/dev/null 2>&1

# creates the manifest file (directories which have posts)
mkmanifest() {
	fd 'README.md' --strip-cwd-prefix --min-depth=2 -x echo '{//}' | unique | sort -d >MANIFEST
}

# minify HTML, from $1 to $2
minify_html() {
	html-minifier --collapse-boolean-attributes --collapse-whitespace --remove-comments --remove-optional-tags --remove-redundant-attributes --remove-script-type-attributes --remove-style-link-type-attributes --remove-tag-whitespace "$1" -o "$2"
	return $?
}

# converts $1 to $2 using pandoc
pandoc_generate() {
	local html_temp
	if ((HAS_HTML_MINIFIER)); then
		html_temp="$(mktemp -p /tmp exobrain-XXXXXXXXXXXXX.html)"
		if pandoc -s -o "$html_temp" --quiet --template=assets/template.html "$1"; then
			if minify_html "$html_temp" "$2"; then
				return 0 # succeeded, exit early
			else
				printf 'Error rendering %s to %s\n' "$1" "$2" >&2
				# drop through and do default render
			fi
		fi
	fi
	pandoc -s -o "$2" --quiet --template=assets/template.html "$1"
	return $?
}

# generate JSON to validate attributes in metadata (i.e. yaml frontmatter)
metadata_generate() {
	pandoc --from=markdown-smart --to=plain --template=./assets/meta.template "$1" >"$2"
}

# use pandoc to convert each post to plaintext, convert that to JSON w/ a URL
generate_search_json() {
	local plaintext_out
	{ while IFS= read -r node; do
		plaintext_out="$(pandoc "${node}/README.md" -t plain | tr -cd ' [:alnum:]')"
		# generate JSON output
		jq -r -n --arg URL "/${node}" --arg TEXT "$plaintext_out" '{"url":$URL,"text":$TEXT}'
	done; } <MANIFEST | jq --slurp
}

generate_search_index() {
	printf 'Generating search index...\n'
	generate_search_json >./search_index.json
}

render() {
	local dir
	readonly dir="$1"
	if [[ "$2" == "meta" ]]; then
		metadata_generate "${dir}/README.md" "${dir}/meta.json"
	else
		pandoc_generate "${dir}/README.md" "${dir}/index.html"
	fi
}

run_build() {
	local i n procs manifest_length

	# make sure corresponding README files exist for P_README files
	# so that the directories appear in the manifest
	# (since this uses the presence of a README.md file to determine the existence of a node)
	# this only really matters the first time pmark is run on a P_README.md file,
	# but its not that much overhead anyways
	fd '^P_README.md$' | sed "s/P_//g" | xargs touch

	# autoformat markdown in place, if possible
	((HAS_PRETTIER)) && {
		local MD_FILE_COUNT
		MD_FILE_COUNT="$(fd '\.md$' | wc -l)"
		# use a coproc to create a progress bar of sorts
		coproc prettier_coproc { fd '\.md$' -X prettier -w; } 2>&1
		n=0
		while IFS=$'\n' read -ru "${prettier_coproc[0]}"; do
			((n++))
			printf '\r%s[%02d%%]%s Autoformatting markdown files...' "$GREEN" "$((100 * n / MD_FILE_COUNT))" "$RESET"
		done
		wait
		printf '\n'
	}

	# remove old metadata files
	find . -name 'meta.json' -delete

	# render home page
	render "."
	# generate 404 page
	pandoc_generate "./404.md" "./404.html"
	# make manifest
	mkmanifest
	manifest_length="$(wc -l <MANIFEST)"

	# get cpu count to determine how many jobs to run at a time
	procs="$(nproc)"
	[[ -z "$procs" ]] && procs=4
	procs="$((procs * 2))"

	i=0 # to handle parallelism
	n=0 # to print current % done
	while IFS= read -r node; do
		((i++))
		((n++))
		((i >= procs * 2)) && {
			wait
			i=0
		}
		render "$node" meta &
		printf '\r%s[%d%%]%s Building metadata...' "$GREEN" "$((100 * n / manifest_length))" "$RESET"
	done <MANIFEST
	wait
	printf '\n'

	# run pmark on each P_README.md file
	# builds the blog feed/sitemap and curls the project page
	# see https://github.com/seanbreckenridge/pmark
	# run this 'manually' instead of with a coproc so that errors are handled nicely
	local PMARK_FILES PMARK_COUNT
	n=0 # to print current % done
	PMARK_FILES="$(fd '^P_README.md$')"
	PMARK_COUNT="$(wc -l <<<"$PMARK_FILES")"
	while IFS= read -r preadme_md; do
		((n++))
		# capture just stderr
		PMARK_ERR="$(pmark "$preadme_md" 2>&1 >/dev/null)" || {
			printf '%s\n' "$PMARK_ERR"
			return 1
		}
		printf '\r%s[%d%%]%s Running pmark...' "$GREEN" "$((100 * n / PMARK_COUNT))" "$RESET"
	done <<<"$PMARK_FILES"
	printf '\n'

	i=0
	n=0
	while IFS= read -r node; do
		render "$node" &
		((n++))
		((i++))
		((i >= procs)) && {
			wait
			i=0
		}
		printf '\r%s[%d%%]%s Building html files...' "$GREEN" "$((100 * n / manifest_length))" "$RESET"
	done <MANIFEST
	wait
	printf '\n'
	# remove temp exobrain files
	rm -fv /tmp/exobrain-* >/dev/null
	# check for yaml frontmatter errors
	if go run exoharden_cmd.go; then
		printf ' %sâœ…%s No yaml frontmatter formatting errors found!\n' "$GREEN" "$RESET"
	else
		return 1
	fi

	generate_search_index || return $?
}

run_build || exit $?
