#!/bin/bash
# This builds the markdown files into HTML files.
# This runs pandoc by searching for README.md files recursively
# and running pandoc against that with the assets/template.html as a base

wait-for-internet

cd "$(dirname "${BASH_SOURCE[0]}")" || exit

mkmanifest() {
	declare line
	while IFS= read -r line; do
		line=${line#./}
		[[ "$line" == . ]] && continue
		echo "$line"
	done <<<"$(find . -name 'README.md' -printf "%h\n" | sort -d)" >MANIFEST
}

# converts $1 to $2 using pandoc
pandoc_generate() {
	pandoc -s -o "$2" --quiet --template=assets/template.html "$1"
}

render() {
	declare dir="$1"
	echo Building "'$dir'"
	pandoc_generate "$dir/README.md" "$dir/index.html"
}

# run pmark on each P_README.md file
# builds the blog feed/sitemap and curls the project page
# see https://github.com/seanbreckenridge/pmark
find . -name 'P_README.md' -type f -exec pmark {} + || exit $?

# render home page
render "."
# generate 404 page
pandoc_generate "./404.md" "./404.html"
# make manifest
mkmanifest

# get cpu count to use that, else run 5 pandoc builds at a time
if command -v nproc >/dev/null 2>&1; then
	procs="$(nproc)"
else
	procs=5
fi

i=0
while IFS= read -r node; do
	render "$node" &
	((i++))
	((i >= procs)) && {
		wait
		i=0
	}
done <./MANIFEST
wait
