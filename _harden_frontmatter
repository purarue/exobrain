#!/usr/bin/env python3
# Makes sure that certain attributes are specified
# in the pandoc meta tags
# Recieves the output from 'pandoc <filename> -t json'
# from stdin (the pandoc AST)
# expects DIRNAME environment variable to be set,
# which is the directory currently being checked

import sys
import os
import functools

try:
    import click
    import panflute
except:
    print(
        "External Dependencies not satisfied. Install with:\npip3 install --user panflute click",
        file=sys.stderr,
    )

err_printer = functools.partial(click.secho, err=True, fg="red")

# error helper
def err(*args, **kwargs):
    err_printer(*args, **kwargs)
    sys.exit(1)


def parse_metadata_from_doc(elem, doc):
    # extract top-level document
    if isinstance(elem, panflute.Doc):
        check_metadata(elem.metadata)


required_keys = set(["Title", "Blog"])
title_ignored_paths = set(["feed", "sitemap"])

# if an item isn't a blog, make sure its marked - Blog: false
# if it is a blog, make sure its marked - Blog: true
def validate_blog(
        relpath: str, meta_dict: panflute.containers.DictContainer):
    is_post = relpath.startswith("post/")
    is_manifest = relpath.startswith("feed")
    if not isinstance(meta_dict["Blog"], panflute.elements.MetaBool):
        err(f"{relpath} isn't a boolean, its {type(meta_dict['Blog'])}")
    if is_post or is_manifest:
        if not meta_dict["Blog"].boolean:
            err(
                f"{relpath} should be marked Bool: true, but its {meta_dict['Blog'].boolean}"
            )
        if is_post:
            if "Date" not in meta_dict:
                err("f{relpath} should have a Date, for when it was published")
    else:
        if meta_dict["Blog"].boolean:
            err(
                f"{relpath} should be marked Bool: false, but its {meta_dict['Blog'].boolean}"
            )


def check_metadata(meta_elem: panflute.elements.MetaMap):
    relpath: str = os.environ["DIRNAME"]
    if relpath == ".":
        return
    # http://scorreia.com/software/panflute/code.html#panflute.containers.DictContainer
    # dict-like container
    meta_dict: panflute.containers.DictContainer = meta_elem.content
    if "Blog" not in meta_dict:
        err(f"{relpath} doesn't have a 'Blog'")
    if relpath not in title_ignored_paths:
        if "Title" not in meta_dict:
            err(f"{relpath} doesn't have a 'Title'")
    validate_blog(relpath, meta_dict)


def main(doc=None):
    panflute.run_filter(
        parse_metadata_from_doc, doc=doc, output_stream=open(os.devnull, "w")
    )


if __name__ == "__main__":
    main()
